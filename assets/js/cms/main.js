/* Generated by Babel */
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Application = (function () {
    function Application() {
        _classCallCheck(this, Application);

        this.controllers = [];
    }

    _createClass(Application, [{
        key: "addFunction",
        value: function addFunction(name, fn) {
            this[name] = fn;
        }
    }, {
        key: "addController",
        value: function addController(name, controller) {
            this.controllers[name] = controller;
        }
    }, {
        key: "loadController",
        value: function loadController() {
            var _this = this;

            $("[data-controller]").each(function (index, element) {
                if (!$(element).data("controller-instance")) {
                    var controllerName = $(element).data("controller");
                    var instance = _this.setElementController($(element), controllerName);
                    if (instance && instance.init) {
                        instance.init();
                    }
                }
            });
        }
    }, {
        key: "setElementController",
        value: function setElementController(element, controllerName) {
            if (this.controllers[controllerName] && typeof this.controllers[controllerName] === "function") {
                var instance = new this.controllers[controllerName](element);
                element.data("controller-instance", instance);
                return instance;
            }
        }
    }, {
        key: "buildCrud",
        value: function buildCrud(element) {
            return this.setElementController(element, "CrudController");
        }
    }]);

    return Application;
})();

var f4fApp = new Application();
f4fApp.addFunction("abrirToast", function (mensagem) {
    $.toast({
        text: mensagem,
        loader: false,
        position: { right: "10px", bottom: "10px" },
        showHideTransition: "fade",
        textAlign: "center"
    });
});

f4fApp.addFunction("showModal", function (title, text, accept) {
    var modal = $("[data-modal]");
    modal.find("[data-modal-accept], [data-modal-close]").off();
    modal.find("[data-modal-title]").text(title);
    modal.find("[data-modal-text]").text(text);
    modal.addClass("show");
    modal.find("[data-modal-close]").on("click", function () {
        modal.removeClass("show");
    });

    modal.find("[data-modal-accept]").on("click", function () {
        modal.removeClass("show");
        if (accept && typeof accept === "function") {
            accept();
        }
    });
});

$(function () {
    f4fApp.loadController();
});
